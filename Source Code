import pygame
import random

#initialisation of pygame
pygame.init()

red = (255,0,0)
green = (0,255,0)
yellow = (255,255,0)
black = (0,0,0)
white = (255,255,255)

font = pygame.font.SysFont(None, 25)

WIDTH = 800
HEIGHT = 600

y_dimension = range(0,600)
x_dimension = range(0,800)

FPS = 1000

display = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("Class Test")

clock = pygame.time.Clock()
enemy_count = []


# player class
class player(pygame.sprite.Sprite):
    # sprite for player
    def __init__(self):
        self.x = 400
        self.y = 575
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50,50))
        self.image.fill(red)
        self.rect = self.image.get_rect()
        self.rect.center = (self.x,self.y)

    def update(self):
        self.rect.center = (self.x, self.y)

        


class Enemy(pygame.sprite.Sprite):

    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50,50))
        self.image.fill(green)
        self.rect = self.image.get_rect()
        self.x = random.randint(0,800)
        self.y = random.randint(1,300)
        self.y = -self.y
        self.rect.center = (self.x,self.y)

    def delete(self):
        enemy_count.remove(self)
        self.kill()
        

    def update(self):
        if self.y > 600:
            pygame.quit()
            
        self.y += 0.1
        self.rect.center = (self.x, self.y)
        

class Bullet(pygame.sprite.Sprite):

    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((20,20))
        self.image.fill(yellow)
        self.rect = self.image.get_rect()
        self.x = player.x
        self.y = player.y
        self.rect.center = (self.x,self.y)

    def update(self):
        # hit detection with enemy
        for enemy in enemy_count:
            if self.y > enemy.y-25 and self.y < enemy.y+25:
                if self.x > enemy.x-25 and self.x < enemy.x+25:
                    enemy.delete()
                    self.kill()
        #boundaries
        if self.y not in y_dimension:
            self.kill()

        self.y -= 1
        self.rect.center = (self.x,self.y)        
        


all_sprites = pygame.sprite.Group()
player = player()
enemy = Enemy()
enemy_count.append(enemy)
all_sprites.add(player,enemy)




def game():

    player_move_x = 0
    spawn_count = 1

    d_font = pygame.font.get_default_font()
    font = pygame.font.SysFont(d_font, 60)
    font.set_bold(True)

    wave = 1
    wave_text = font.render("Wave: "+str(wave), False, white)
    
    while True:

        # keyboard event handling (controls)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

            elif event.type == pygame.KEYDOWN:
                #moving
                if event.key == pygame.K_LEFT:
                    player_move_x = -0.5
                elif event.key == pygame.K_RIGHT:
                    player_move_x = 0.5
                # firing
                elif event.key == pygame.K_SPACE:
                    bullet = Bullet()
                    all_sprites.add(bullet)
                    
            elif event.type == pygame.KEYUP:
                player_move_x = 0

        #player movement and collision detection
        if player.x+25 > WIDTH:
            player.x = WIDTH-25
        elif player.x-25 < 0:
            player.x = 0+25

        player.x += player_move_x

        #enemy spawning
        if len(enemy_count) == 0:
            wave += 1
            spawn_count += 1
            wave_text = font.render("Wave: "+str(wave), False, white)
            for _ in range(int(spawn_count)):
                enemy = Enemy()
                all_sprites.add(enemy)
                enemy_count.append(enemy)



        #updating
        all_sprites.update()
        display.fill(black)
        all_sprites.draw(display)
        display.blit(wave_text, (320, 20))

        #refreshing display
        pygame.display.flip()
        clock.tick(FPS)

game()
        

